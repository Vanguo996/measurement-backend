// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: van.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// name = instr-2400 instr-6221
type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstrumentsName string `protobuf:"bytes,1,opt,name=instruments_name,json=instrumentsName,proto3" json:"instruments_name,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_van_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_van_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_van_proto_rawDescGZIP(), []int{0}
}

func (x *Request) GetInstrumentsName() string {
	if x != nil {
		return x.InstrumentsName
	}
	return ""
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_van_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_van_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_van_proto_rawDescGZIP(), []int{1}
}

func (x *Response) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type SweepRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartVolt   float32 `protobuf:"fixed32,1,opt,name=start_volt,json=startVolt,proto3" json:"start_volt,omitempty"`
	VoltStep    float32 `protobuf:"fixed32,2,opt,name=volt_step,json=voltStep,proto3" json:"volt_step,omitempty"`
	EndVolt     float32 `protobuf:"fixed32,3,opt,name=end_volt,json=endVolt,proto3" json:"end_volt,omitempty"`
	CurrentCmpl float32 `protobuf:"fixed32,4,opt,name=current_cmpl,json=currentCmpl,proto3" json:"current_cmpl,omitempty"`
	// mes_speed: 0.1 - 10
	MesSpeed float32 `protobuf:"fixed32,5,opt,name=mes_speed,json=mesSpeed,proto3" json:"mes_speed,omitempty"`
}

func (x *SweepRequest) Reset() {
	*x = SweepRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_van_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SweepRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SweepRequest) ProtoMessage() {}

func (x *SweepRequest) ProtoReflect() protoreflect.Message {
	mi := &file_van_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SweepRequest.ProtoReflect.Descriptor instead.
func (*SweepRequest) Descriptor() ([]byte, []int) {
	return file_van_proto_rawDescGZIP(), []int{2}
}

func (x *SweepRequest) GetStartVolt() float32 {
	if x != nil {
		return x.StartVolt
	}
	return 0
}

func (x *SweepRequest) GetVoltStep() float32 {
	if x != nil {
		return x.VoltStep
	}
	return 0
}

func (x *SweepRequest) GetEndVolt() float32 {
	if x != nil {
		return x.EndVolt
	}
	return 0
}

func (x *SweepRequest) GetCurrentCmpl() float32 {
	if x != nil {
		return x.CurrentCmpl
	}
	return 0
}

func (x *SweepRequest) GetMesSpeed() float32 {
	if x != nil {
		return x.MesSpeed
	}
	return 0
}

var File_van_proto protoreflect.FileDescriptor

var file_van_proto_rawDesc = []byte{
	0x0a, 0x09, 0x76, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x34, 0x0a, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x22, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xa6, 0x01, 0x0a, 0x0d, 0x73, 0x77, 0x65, 0x65, 0x70, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x56, 0x6f, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x74, 0x5f, 0x73,
	0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x74, 0x53,
	0x74, 0x65, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x56, 0x6f, 0x6c, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6d, 0x70, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6d, 0x70,
	0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x53, 0x70, 0x65, 0x65, 0x64, 0x32, 0x6b,
	0x0a, 0x15, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x08, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x09, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2c, 0x0a,
	0x0b, 0x49, 0x56, 0x53, 0x77, 0x65, 0x65, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x2e, 0x73,
	0x77, 0x65, 0x65, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x03, 0x5a, 0x01, 0x2e,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_van_proto_rawDescOnce sync.Once
	file_van_proto_rawDescData = file_van_proto_rawDesc
)

func file_van_proto_rawDescGZIP() []byte {
	file_van_proto_rawDescOnce.Do(func() {
		file_van_proto_rawDescData = protoimpl.X.CompressGZIP(file_van_proto_rawDescData)
	})
	return file_van_proto_rawDescData
}

var file_van_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_van_proto_goTypes = []interface{}{
	(*Request)(nil),      // 0: request
	(*Response)(nil),     // 1: response
	(*SweepRequest)(nil), // 2: sweep_request
}
var file_van_proto_depIdxs = []int32{
	0, // 0: InstrumentsController.CloseOutput:input_type -> request
	2, // 1: InstrumentsController.IVSweepMode:input_type -> sweep_request
	1, // 2: InstrumentsController.CloseOutput:output_type -> response
	1, // 3: InstrumentsController.IVSweepMode:output_type -> response
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_van_proto_init() }
func file_van_proto_init() {
	if File_van_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_van_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_van_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_van_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SweepRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_van_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_van_proto_goTypes,
		DependencyIndexes: file_van_proto_depIdxs,
		MessageInfos:      file_van_proto_msgTypes,
	}.Build()
	File_van_proto = out.File
	file_van_proto_rawDesc = nil
	file_van_proto_goTypes = nil
	file_van_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// InstrumentsControllerClient is the client API for InstrumentsController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InstrumentsControllerClient interface {
	CloseOutput(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	IVSweepMode(ctx context.Context, in *SweepRequest, opts ...grpc.CallOption) (InstrumentsController_IVSweepModeClient, error)
}

type instrumentsControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewInstrumentsControllerClient(cc grpc.ClientConnInterface) InstrumentsControllerClient {
	return &instrumentsControllerClient{cc}
}

func (c *instrumentsControllerClient) CloseOutput(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/InstrumentsController/CloseOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instrumentsControllerClient) IVSweepMode(ctx context.Context, in *SweepRequest, opts ...grpc.CallOption) (InstrumentsController_IVSweepModeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_InstrumentsController_serviceDesc.Streams[0], "/InstrumentsController/IVSweepMode", opts...)
	if err != nil {
		return nil, err
	}
	x := &instrumentsControllerIVSweepModeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InstrumentsController_IVSweepModeClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type instrumentsControllerIVSweepModeClient struct {
	grpc.ClientStream
}

func (x *instrumentsControllerIVSweepModeClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InstrumentsControllerServer is the server API for InstrumentsController service.
type InstrumentsControllerServer interface {
	CloseOutput(context.Context, *Request) (*Response, error)
	IVSweepMode(*SweepRequest, InstrumentsController_IVSweepModeServer) error
}

// UnimplementedInstrumentsControllerServer can be embedded to have forward compatible implementations.
type UnimplementedInstrumentsControllerServer struct {
}

func (*UnimplementedInstrumentsControllerServer) CloseOutput(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseOutput not implemented")
}
func (*UnimplementedInstrumentsControllerServer) IVSweepMode(*SweepRequest, InstrumentsController_IVSweepModeServer) error {
	return status.Errorf(codes.Unimplemented, "method IVSweepMode not implemented")
}

func RegisterInstrumentsControllerServer(s *grpc.Server, srv InstrumentsControllerServer) {
	s.RegisterService(&_InstrumentsController_serviceDesc, srv)
}

func _InstrumentsController_CloseOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentsControllerServer).CloseOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InstrumentsController/CloseOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentsControllerServer).CloseOutput(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstrumentsController_IVSweepMode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SweepRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InstrumentsControllerServer).IVSweepMode(m, &instrumentsControllerIVSweepModeServer{stream})
}

type InstrumentsController_IVSweepModeServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type instrumentsControllerIVSweepModeServer struct {
	grpc.ServerStream
}

func (x *instrumentsControllerIVSweepModeServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

var _InstrumentsController_serviceDesc = grpc.ServiceDesc{
	ServiceName: "InstrumentsController",
	HandlerType: (*InstrumentsControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CloseOutput",
			Handler:    _InstrumentsController_CloseOutput_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "IVSweepMode",
			Handler:       _InstrumentsController_IVSweepMode_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "van.proto",
}
